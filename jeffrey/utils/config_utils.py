import sys
import yaml
import logging
import logging.config
from pathlib import Path
from io import StringIO
from typing import TYPE_CHECKING, Any, Optional, Union

import hydra
from hydra.types import TaskFunction
from omegaconf import DictConfig, OmegaConf

from jeffrey.config_schemas import config_schema
from jeffrey.config_schemas.config_schema import Config
from jeffrey.utils.io_utils import open_file

if TYPE_CHECKING:
    from jeffrey.config_schemas.config_schema import Config


def get_config(config_path: str, config_name: str, to_object: bool = False, return_dict_config: bool = True) -> TaskFunction:
    setup_config()
    setup_logger()

    def main_decorator(task_function: TaskFunction) -> Any:
        @hydra.main(config_path=config_path, config_name=config_name, version_base=None)
        def decorated_main(dict_config: Optional[DictConfig] = None) -> Any:
            if to_object:
                config = OmegaConf.to_object(dict_config)
            
            if not return_dict_config:
                assert to_object
                return task_function(config)
            
            return task_function(dict_config)

        return decorated_main

    return main_decorator

def get_config_and_dict_config(config_path: str, config_name: str) -> Any:
    setup_config()
    setup_logger()

    def main_decorator(task_function: Any) -> Any:
        @hydra.main(config_path=config_path, config_name=config_name, version_base=None)
        def decorated_main(dict_config: Optional[DictConfig] = None) -> Any:
            config = OmegaConf.to_object(dict_config)
            return task_function(config, dict_config)

        return decorated_main

    return main_decorator


def setup_config() -> None:
    config_schema.register_config()


def setup_logger() -> None:
    with open("./jeffrey/configs/hydra/job_logging/custom.yaml", "r") as stream:
        config = yaml.load(stream, Loader=yaml.FullLoader)
    logging.config.dictConfig(config)
    
def load_config_header() -> str:
    config_header_path = Path("./jeffrey/configs/automatically_generated/fully_config_header.yaml")

    with open(config_header_path, "r") as f:
        return f.read()

def save_config_as_yaml(config: Union["Config", DictConfig], save_path: str) -> None:
    text_io = StringIO()
    text_io.writelines(
        [
            f"# Do not edit this file. It is automatically generated by {sys.argv[0]}.\n",
            "# If you want to modify configuration, edit source files in jeffrey/configs directory.\n",
            "\n",
        ]
    )

    config_header = load_config_header()
    text_io.write(config_header)
    text_io.write("\n")

    OmegaConf.save(config, text_io, resolve=True)
    with open_file(save_path, "w") as f:
        f.write(text_io.getvalue())